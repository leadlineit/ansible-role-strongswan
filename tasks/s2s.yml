---
- name: Update repo cache and install a certbot package
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items:
    - certbot

- name: Create directories for s2s config and secrets file(s)
  ansible.builtin.file: 
    path: "{{ item }}"
    state: directory
    mode: '0750'
    owner: root
    group: root
  with_items:
    - /etc/ipsec.conf.d/s2s
    - /etc/ipsec.secrets.d/s2s

- name: Add configuration file(s) for s2s tunnels
  no_log: true
  ansible.builtin.template:
    src: s2s.j2
    dest: "/etc/ipsec.conf.d/s2s/{{ item.name }}.conf"
    mode: '0644'
    owner: root
    group: root
  with_items: "{{ strongswan.s2s }}"
  notify:
    - Reload strongswan service

- name: Add secrets file(s) for s2s tunnels
  no_log: true
  ansible.builtin.template:
    src: s2s-secret.j2
    dest: "/etc/ipsec.secrets.d/s2s/{{ item.name }}.conf"
    mode: '0644'
    owner: root
    group: root
  with_items: "{{ strongswan.s2s }}"
  notify:
    - Rereadsecrets of strongswan service

- name: Find unmanaged s2s configuration file(s)
  ansible.builtin.find:
    paths: /etc/ipsec.conf.d/s2s
    file_type: file
    excludes: "{{ strongswan.s2s | map(attribute='name') | product(['.conf']) | map('join') | flatten }}"
  register: ssout_conf

- name: Remove unmanaged s2s configuration file(s)
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ ssout_conf.files | map(attribute='path') | unique }}"
  notify:
    - Reload strongswan service

- name: Find unmanaged s2s secrets file(s)
  ansible.builtin.find:
    paths: /etc/ipsec.secrets.d/s2s
    file_type: file
    excludes: "{{ strongswan.s2s | map(attribute='name') | product(['.conf']) | map('join') | flatten }}"
  register: ssout_sec

- name: Remove unmanaged s2s secrets file(s)
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ ssout_sec.files | map(attribute='path') | unique }}"
  notify:
    - Rereadsecrets of strongswan service
